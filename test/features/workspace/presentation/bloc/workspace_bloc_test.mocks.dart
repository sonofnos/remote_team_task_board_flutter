// Mocks generated by Mockito 5.4.6 from annotations
// in remote_team_task_board_flutter/test/features/workspace/presentation/bloc/workspace_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:dartz/dartz.dart' as _i3;
import 'package:mockito/mockito.dart' as _i1;
import 'package:remote_team_task_board_flutter/core/error/failures.dart' as _i6;
import 'package:remote_team_task_board_flutter/core/usecases/usecase.dart'
    as _i8;
import 'package:remote_team_task_board_flutter/features/workspace/domain/entities/workspace.dart'
    as _i7;
import 'package:remote_team_task_board_flutter/features/workspace/domain/repositories/workspace_repository.dart'
    as _i2;
import 'package:remote_team_task_board_flutter/features/workspace/domain/usecases/create_workspace.dart'
    as _i9;
import 'package:remote_team_task_board_flutter/features/workspace/domain/usecases/get_workspaces.dart'
    as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeWorkspaceRepository_0 extends _i1.SmartFake
    implements _i2.WorkspaceRepository {
  _FakeWorkspaceRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

class _FakeEither_1<L, R> extends _i1.SmartFake implements _i3.Either<L, R> {
  _FakeEither_1(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [GetWorkspaces].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWorkspaces extends _i1.Mock implements _i4.GetWorkspaces {
  MockGetWorkspaces() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.WorkspaceRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeWorkspaceRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.WorkspaceRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, List<_i7.Workspace>>> call(
    _i8.NoParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue:
                _i5.Future<_i3.Either<_i6.Failure, List<_i7.Workspace>>>.value(
                  _FakeEither_1<_i6.Failure, List<_i7.Workspace>>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, List<_i7.Workspace>>>);
}

/// A class which mocks [CreateWorkspace].
///
/// See the documentation for Mockito's code generation for more information.
class MockCreateWorkspace extends _i1.Mock implements _i9.CreateWorkspace {
  MockCreateWorkspace() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.WorkspaceRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeWorkspaceRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.WorkspaceRepository);

  @override
  _i5.Future<_i3.Either<_i6.Failure, _i7.Workspace>> call(
    _i9.CreateWorkspaceParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue:
                _i5.Future<_i3.Either<_i6.Failure, _i7.Workspace>>.value(
                  _FakeEither_1<_i6.Failure, _i7.Workspace>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i5.Future<_i3.Either<_i6.Failure, _i7.Workspace>>);
}
